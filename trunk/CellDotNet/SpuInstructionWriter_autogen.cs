using System;
using System.Collections.Generic;
using System.Text;

namespace CellDotNet
{
	// THIS CLASS IS GENERATED BY CellDotNet.CodeGenUtils.GenerateSpuInstructionWriterMethods() - DO NO EDIT. 
	partial class SpuInstructionWriter
	{

		/// <summary>
		/// Load Quadword (d-form)
		/// </summary>
		public void WriteLqd(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.lqd, rt, ra, value);
		}

		/// <summary>
		/// Load Quadword (x-form)
		/// </summary>
		public void WriteLqx(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.lqx, rt, ra, rb);
		}

		/// <summary>
		/// Load Quadword (a-form)
		/// </summary>
		public void WriteLqa(VirtualRegister rt, int symbol)
		{
			WriteRI16(SpuOpCode.lqa, rt, symbol);
		}

		/// <summary>
		/// Load Quadword Instruction Relative (a-form)
		/// </summary>
		public void WriteLqr(VirtualRegister rt, int symbol)
		{
			WriteRI16(SpuOpCode.lqr, rt, symbol);
		}

		/// <summary>
		/// Store Quadword (d-form)
		/// </summary>
		public void WriteStqd(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.stqd, rt, ra, value);
		}

		/// <summary>
		/// Store Quadword (x-form)
		/// </summary>
		public void WriteStqx(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.stqx, rt, ra, rb);
		}

		/// <summary>
		/// Store Quadword (a-form)
		/// </summary>
		public void WriteStqa(VirtualRegister rt, int symbol)
		{
			WriteRI16(SpuOpCode.stqa, rt, symbol);
		}

		/// <summary>
		/// Store Quadword Instruction Relative (a-form)
		/// </summary>
		public void WriteStqr(VirtualRegister rt, int symbol)
		{
			WriteRI16(SpuOpCode.stqr, rt, symbol);
		}

		/// <summary>
		/// Generate Controls for Byte Insertion (d-form)
		/// </summary>
		public void WriteCbd(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI7(SpuOpCode.cbd, rt, ra, value);
		}

		/// <summary>
		/// Generate Controls for Byte Insertion (x-form)
		/// </summary>
		public void WriteCbx(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.cbx, rt, ra, rb);
		}

		/// <summary>
		/// Generate Controls for Halfword Insertion (d-form)
		/// </summary>
		public void WriteChd(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI7(SpuOpCode.chd, rt, ra, value);
		}

		/// <summary>
		/// Generate Controls for Halfword Insertion (x-form)
		/// </summary>
		public void WriteChx(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.chx, rt, ra, rb);
		}

		/// <summary>
		/// Generate Controls for Word Insertion (d-form)
		/// </summary>
		public void WriteCwd(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI7(SpuOpCode.cwd, rt, ra, value);
		}

		/// <summary>
		/// Generate Controls for Word Insertion (x-form)
		/// </summary>
		public void WriteCwx(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.cwx, rt, ra, rb);
		}

		/// <summary>
		/// Generate Controls for Doubleword Insertion (d-form)
		/// </summary>
		public void WriteCdd(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI7(SpuOpCode.cdd, rt, ra, value);
		}

		/// <summary>
		/// Generate Controls for Doubleword Insertion (x-form)
		/// </summary>
		public void WriteCdx(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.cdx, rt, ra, rb);
		}

		/// <summary>
		/// Immediate Load Halfword
		/// </summary>
		public void WriteIlh(VirtualRegister rt, int symbol)
		{
			WriteRI16(SpuOpCode.ilh, rt, symbol);
		}

		/// <summary>
		/// Immediate Load Halfword Upper
		/// </summary>
		public void WriteIlhu(VirtualRegister rt, int symbol)
		{
			WriteRI16(SpuOpCode.ilhu, rt, symbol);
		}

		/// <summary>
		/// Immediate Load Word
		/// </summary>
		public void WriteIl(VirtualRegister rt, int symbol)
		{
			WriteRI16(SpuOpCode.il, rt, symbol);
		}

		/// <summary>
		/// Immediate Load Address
		/// </summary>
		public void WriteIla(VirtualRegister rt, int symbol)
		{
			WriteRI18(SpuOpCode.ila, rt, symbol);
		}

		/// <summary>
		/// Immediate Or Halfword Lower
		/// </summary>
		public void WriteIohl(VirtualRegister rt, int symbol)
		{
			WriteRI16(SpuOpCode.iohl, rt, symbol);
		}

		/// <summary>
		/// Form Select Mask for Bytes Immediate
		/// </summary>
		public void WriteFsmbi(VirtualRegister rt, int symbol)
		{
			WriteRI16(SpuOpCode.fsmbi, rt, symbol);
		}

		/// <summary>
		/// Add Halfword
		/// </summary>
		public void WriteAh(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.ah, rt, ra, rb);
		}

		/// <summary>
		/// Add Halfword Immediate
		/// </summary>
		public void WriteAhi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.ahi, rt, ra, value);
		}

		/// <summary>
		/// Add Word
		/// </summary>
		public void WriteA(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.a, rt, ra, rb);
		}

		/// <summary>
		/// Add Word Immediate
		/// </summary>
		public void WriteAi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.ai, rt, ra, value);
		}

		/// <summary>
		/// Subtract from Halfword
		/// </summary>
		public void WriteSfh(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.sfh, rt, ra, rb);
		}

		/// <summary>
		/// Subtract from Halfword Immediate
		/// </summary>
		public void WriteSfhi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.sfhi, rt, ra, value);
		}

		/// <summary>
		/// Subtract from Word
		/// </summary>
		public void WriteSf(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.sf, rt, ra, rb);
		}

		/// <summary>
		/// Subtract from Word Immediate
		/// </summary>
		public void WriteSfi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.sfi, rt, ra, value);
		}

		/// <summary>
		/// Add Extended
		/// </summary>
		public void WriteAddx(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.addx, rt, ra, rb);
		}

		/// <summary>
		/// Carry Generate
		/// </summary>
		public void WriteCg(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.cg, rt, ra, rb);
		}

		/// <summary>
		/// Carry Generate Extended
		/// </summary>
		public void WriteCgx(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.cgx, rt, ra, rb);
		}

		/// <summary>
		/// Subtract from Extended
		/// </summary>
		public void WriteSfx(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.sfx, rt, ra, rb);
		}

		/// <summary>
		/// Borrow Generate
		/// </summary>
		public void WriteBg(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.bg, rt, ra, rb);
		}

		/// <summary>
		/// Borrow Generate Extended
		/// </summary>
		public void WriteBgx(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.bgx, rt, ra, rb);
		}

		/// <summary>
		/// Multiply
		/// </summary>
		public void WriteMpy(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.mpy, rt, ra, rb);
		}

		/// <summary>
		/// Multiply Unsigned
		/// </summary>
		public void WriteMpyu(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.mpyu, rt, ra, rb);
		}

		/// <summary>
		/// Multiply Immediate
		/// </summary>
		public void WriteMpyi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.mpyi, rt, ra, value);
		}

		/// <summary>
		/// Multiply Unsigned Immediate
		/// </summary>
		public void WriteMpyui(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.mpyui, rt, ra, value);
		}

		/// <summary>
		/// Multiply and Add
		/// </summary>
		public void WriteMpya(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb, VirtualRegister rc)
		{
			WriteRRR(SpuOpCode.mpya, rt, ra, rb, rc);
		}

		/// <summary>
		/// Multiply High
		/// </summary>
		public void WriteMpyh(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.mpyh, rt, ra, rb);
		}

		/// <summary>
		/// Multiply and Shift Right
		/// </summary>
		public void WriteMpys(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.mpys, rt, ra, rb);
		}

		/// <summary>
		/// Multiply High High
		/// </summary>
		public void WriteMpyhh(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.mpyhh, rt, ra, rb);
		}

		/// <summary>
		/// Multiply High High and Add
		/// </summary>
		public void WriteMpyhha(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.mpyhha, rt, ra, rb);
		}

		/// <summary>
		/// Multiply High High Unsigned
		/// </summary>
		public void WriteMpyhhu(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.mpyhhu, rt, ra, rb);
		}

		/// <summary>
		/// Multiply High High Unsigned and Add
		/// </summary>
		public void WriteMpyhhau(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.mpyhhau, rt, ra, rb);
		}

		/// <summary>
		/// Count Leading Zeros
		/// </summary>
		public void WriteClz(VirtualRegister rt, VirtualRegister ra)
		{
			WriteRR2(SpuOpCode.clz, rt, ra);
		}

		/// <summary>
		/// Count Ones in Bytes
		/// </summary>
		public void WriteCntb(VirtualRegister rt, VirtualRegister ra)
		{
			WriteRR2(SpuOpCode.cntb, rt, ra);
		}

		/// <summary>
		/// Form Select Mask for Bytes
		/// </summary>
		public void WriteFsmb(VirtualRegister rt, VirtualRegister ra)
		{
			WriteRR2(SpuOpCode.fsmb, rt, ra);
		}

		/// <summary>
		/// Form Select Mask for Halfwords
		/// </summary>
		public void WriteFsmh(VirtualRegister rt, VirtualRegister ra)
		{
			WriteRR2(SpuOpCode.fsmh, rt, ra);
		}

		/// <summary>
		/// Form Select Mask for Words
		/// </summary>
		public void WriteFsm(VirtualRegister rt, VirtualRegister ra)
		{
			WriteRR2(SpuOpCode.fsm, rt, ra);
		}

		/// <summary>
		/// Gather Bits from Bytes
		/// </summary>
		public void WriteGbb(VirtualRegister rt, VirtualRegister ra)
		{
			WriteRR2(SpuOpCode.gbb, rt, ra);
		}

		/// <summary>
		/// Gather Bits from Halfwords
		/// </summary>
		public void WriteGbh(VirtualRegister rt, VirtualRegister ra)
		{
			WriteRR2(SpuOpCode.gbh, rt, ra);
		}

		/// <summary>
		/// Gather Bits from Words
		/// </summary>
		public void WriteGb(VirtualRegister rt, VirtualRegister ra)
		{
			WriteRR2(SpuOpCode.gb, rt, ra);
		}

		/// <summary>
		/// Average Bytes
		/// </summary>
		public void WriteAvgb(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.avgb, rt, ra, rb);
		}

		/// <summary>
		/// Absolute Differences of Bytes
		/// </summary>
		public void WriteAbsdb(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.absdb, rt, ra, rb);
		}

		/// <summary>
		/// Sum Bytes into Halfwords
		/// </summary>
		public void WriteSumb(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.sumb, rt, ra, rb);
		}

		/// <summary>
		/// Extend Sign Byte to Halfword
		/// </summary>
		public void WriteXsbh(VirtualRegister rt, VirtualRegister ra)
		{
			WriteRR2(SpuOpCode.xsbh, rt, ra);
		}

		/// <summary>
		/// Extend Sign Halfword to Word
		/// </summary>
		public void WriteXshw(VirtualRegister rt, VirtualRegister ra)
		{
			WriteRR2(SpuOpCode.xshw, rt, ra);
		}

		/// <summary>
		/// Extend Sign Word to Doubleword
		/// </summary>
		public void WriteXswd(VirtualRegister rt, VirtualRegister ra)
		{
			WriteRR2(SpuOpCode.xswd, rt, ra);
		}

		/// <summary>
		/// And
		/// </summary>
		public void WriteAnd(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.and, rt, ra, rb);
		}

		/// <summary>
		/// And with Complement
		/// </summary>
		public void WriteAndc(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.andc, rt, ra, rb);
		}

		/// <summary>
		/// And Byte Immediate
		/// </summary>
		public void WriteAndbi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.andbi, rt, ra, value);
		}

		/// <summary>
		/// And Halfword Immediate
		/// </summary>
		public void WriteAndhi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.andhi, rt, ra, value);
		}

		/// <summary>
		/// And Word Immediate
		/// </summary>
		public void WriteAndi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.andi, rt, ra, value);
		}

		/// <summary>
		/// Or
		/// </summary>
		public void WriteOr(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.or, rt, ra, rb);
		}

		/// <summary>
		/// Or with Complement
		/// </summary>
		public void WriteOrc(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.orc, rt, ra, rb);
		}

		/// <summary>
		/// Or Byte Immediate
		/// </summary>
		public void WriteOrbi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.orbi, rt, ra, value);
		}

		/// <summary>
		/// Or Halfword Immediate
		/// </summary>
		public void WriteOrhi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.orhi, rt, ra, value);
		}

		/// <summary>
		/// Or Word Immediate
		/// </summary>
		public void WriteOri(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.ori, rt, ra, value);
		}

		/// <summary>
		/// Or Across
		/// </summary>
		public void WriteOrx(VirtualRegister rt, VirtualRegister ra)
		{
			WriteRR2(SpuOpCode.orx, rt, ra);
		}

		/// <summary>
		/// Exclusive Or
		/// </summary>
		public void WriteXor(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.xor, rt, ra, rb);
		}

		/// <summary>
		/// Exclusive Or Byte Immediate
		/// </summary>
		public void WriteXorbi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.xorbi, rt, ra, value);
		}

		/// <summary>
		/// Exclusive Or Halfword Immediate
		/// </summary>
		public void WriteXorhi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.xorhi, rt, ra, value);
		}

		/// <summary>
		/// Exclusive Or Word Immediate
		/// </summary>
		public void WriteXori(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.xori, rt, ra, value);
		}

		/// <summary>
		/// Nand
		/// </summary>
		public void WriteNand(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.nand, rt, ra, rb);
		}

		/// <summary>
		/// Nor
		/// </summary>
		public void WriteNor(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.nor, rt, ra, rb);
		}

		/// <summary>
		/// Equivalent
		/// </summary>
		public void WriteEqv(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.eqv, rt, ra, rb);
		}

		/// <summary>
		/// Select Bits
		/// </summary>
		public void WriteSelb(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb, VirtualRegister rc)
		{
			WriteRRR(SpuOpCode.selb, rt, ra, rb, rc);
		}

		/// <summary>
		/// Shuffle Bytes
		/// </summary>
		public void WriteShufb(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb, VirtualRegister rc)
		{
			WriteRRR(SpuOpCode.shufb, rt, ra, rb, rc);
		}

		/// <summary>
		/// Shift Left Halfword
		/// </summary>
		public void WriteShlh(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.shlh, rt, ra, rb);
		}

		/// <summary>
		/// Shift Left Halfword Immediate
		/// </summary>
		public void WriteShlhi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI7(SpuOpCode.shlhi, rt, ra, value);
		}

		/// <summary>
		/// Shift Left Word
		/// </summary>
		public void WriteShl(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.shl, rt, ra, rb);
		}

		/// <summary>
		/// Shift Left Word Immediate
		/// </summary>
		public void WriteShli(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI7(SpuOpCode.shli, rt, ra, value);
		}

		/// <summary>
		/// Shift Left Quadword by Bits
		/// </summary>
		public void WriteShlqbi(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.shlqbi, rt, ra, rb);
		}

		/// <summary>
		/// Shift Left Quadword by Bits Immediate
		/// </summary>
		public void WriteShlqbii(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI7(SpuOpCode.shlqbii, rt, ra, value);
		}

		/// <summary>
		/// Shift Left Quadword by Bytes
		/// </summary>
		public void WriteShlqby(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.shlqby, rt, ra, rb);
		}

		/// <summary>
		/// Shift Left Quadword by Bytes Immediate
		/// </summary>
		public void WriteSqlqbyi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI7(SpuOpCode.sqlqbyi, rt, ra, value);
		}

		/// <summary>
		/// Shift Left Quadword by Bytes from Bit Shift Count
		/// </summary>
		public void WriteShlqbybi(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.shlqbybi, rt, ra, rb);
		}

		/// <summary>
		/// Rotate Halfword
		/// </summary>
		public void WriteRoth(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.roth, rt, ra, rb);
		}

		/// <summary>
		/// Rotate Halfword Immediate
		/// </summary>
		public void WriteRothi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI7(SpuOpCode.rothi, rt, ra, value);
		}

		/// <summary>
		/// Rotate Word
		/// </summary>
		public void WriteRot(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.rot, rt, ra, rb);
		}

		/// <summary>
		/// Rotate Word Immediate
		/// </summary>
		public void WriteRoti(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI7(SpuOpCode.roti, rt, ra, value);
		}

		/// <summary>
		/// Rotate Quadword by Bytes
		/// </summary>
		public void WriteRotqby(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.rotqby, rt, ra, rb);
		}

		/// <summary>
		/// Rotate Quadword by Bytes Immediate
		/// </summary>
		public void WriteRotqbyi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI7(SpuOpCode.rotqbyi, rt, ra, value);
		}

		/// <summary>
		/// Rotate Quadword by Bytes from Bit Shift Count
		/// </summary>
		public void WriteRotqbybi(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.rotqbybi, rt, ra, rb);
		}

		/// <summary>
		/// Rotate Quadword by Bits
		/// </summary>
		public void WriteRotqbi(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.rotqbi, rt, ra, rb);
		}

		/// <summary>
		/// Rotate Quadword by Bits Immediate
		/// </summary>
		public void WriteRotqbii(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI7(SpuOpCode.rotqbii, rt, ra, value);
		}

		/// <summary>
		/// Rotate and Mask Halfword
		/// </summary>
		public void WriteRothm(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.rothm, rt, ra, rb);
		}

		/// <summary>
		/// Rotate and Mask Halfword Immediate
		/// </summary>
		public void WriteRothmi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI7(SpuOpCode.rothmi, rt, ra, value);
		}

		/// <summary>
		/// Rotate and Mask Word
		/// </summary>
		public void WriteRotm(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.rotm, rt, ra, rb);
		}

		/// <summary>
		/// Rotate and Mask Word Immediate
		/// </summary>
		public void WriteRotmi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI7(SpuOpCode.rotmi, rt, ra, value);
		}

		/// <summary>
		/// Rotate and Mask Quadword by Bytes
		/// </summary>
		public void WriteRotqmby(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.rotqmby, rt, ra, rb);
		}

		/// <summary>
		/// Rotate and Mask Quadword by Bytes Immediate
		/// </summary>
		public void WriteRotqmbyi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI7(SpuOpCode.rotqmbyi, rt, ra, value);
		}

		/// <summary>
		/// Rotate and Mask Quadword Bytes from Bit Shift Count
		/// </summary>
		public void WriteRotqmbybi(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.rotqmbybi, rt, ra, rb);
		}

		/// <summary>
		/// Rotate and Mask Quadword by Bits
		/// </summary>
		public void WriteRotqmbi(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.rotqmbi, rt, ra, rb);
		}

		/// <summary>
		/// Rotate and Mask Quadword by Bits Immediate
		/// </summary>
		public void WriteRotqmbii(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI7(SpuOpCode.rotqmbii, rt, ra, value);
		}

		/// <summary>
		/// Rotate and Mask Algebraic Halfword
		/// </summary>
		public void WriteRotmah(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.rotmah, rt, ra, rb);
		}

		/// <summary>
		/// Rotate and Mask Algebraic Halfword Immediate
		/// </summary>
		public void WriteRotmahi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI7(SpuOpCode.rotmahi, rt, ra, value);
		}

		/// <summary>
		/// Rotate and Mask Algebraic Word
		/// </summary>
		public void WriteRotma(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.rotma, rt, ra, rb);
		}

		/// <summary>
		/// Rotate and Mask Algebraic Word Immediate
		/// </summary>
		public void WriteRotmai(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI7(SpuOpCode.rotmai, rt, ra, value);
		}

		/// <summary>
		/// Halt If Equal
		/// </summary>
		public void WriteHeq(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.heq, rt, ra, rb);
		}

		/// <summary>
		/// Halt If Equal Immediate
		/// </summary>
		public void WriteHeqi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.heqi, rt, ra, value);
		}

		/// <summary>
		/// Halt If Greater Than
		/// </summary>
		public void WriteHgt(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.hgt, rt, ra, rb);
		}

		/// <summary>
		/// Halt If Greater Than Immediate
		/// </summary>
		public void WriteHgti(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.hgti, rt, ra, value);
		}

		/// <summary>
		/// Halt If Logically Greater Than
		/// </summary>
		public void WriteHlgt(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.hlgt, rt, ra, rb);
		}

		/// <summary>
		/// Halt If Logically Greater Than Immediate
		/// </summary>
		public void WriteHlgti(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.hlgti, rt, ra, value);
		}

		/// <summary>
		/// Compare Equal Byte
		/// </summary>
		public void WriteCeqb(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.ceqb, rt, ra, rb);
		}

		/// <summary>
		/// Compare Equal Byte Immediate
		/// </summary>
		public void WriteCeqbi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.ceqbi, rt, ra, value);
		}

		/// <summary>
		/// Compare Equal Halfword
		/// </summary>
		public void WriteCeqh(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.ceqh, rt, ra, rb);
		}

		/// <summary>
		/// Compare Equal Halfword Immediate
		/// </summary>
		public void WriteCeqhi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.ceqhi, rt, ra, value);
		}

		/// <summary>
		/// Compare Equal Word
		/// </summary>
		public void WriteCeq(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.ceq, rt, ra, rb);
		}

		/// <summary>
		/// Compare Equal Word Immediate
		/// </summary>
		public void WriteCeqi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.ceqi, rt, ra, value);
		}

		/// <summary>
		/// Compare Greater Than Byte
		/// </summary>
		public void WriteCgtb(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.cgtb, rt, ra, rb);
		}

		/// <summary>
		/// Compare Greater Than Byte Immediate
		/// </summary>
		public void WriteCgtbi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.cgtbi, rt, ra, value);
		}

		/// <summary>
		/// Compare Greater Than Halfword
		/// </summary>
		public void WriteCgth(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.cgth, rt, ra, rb);
		}

		/// <summary>
		/// Compare Greater Than Halfword Immediate
		/// </summary>
		public void WriteCgthi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.cgthi, rt, ra, value);
		}

		/// <summary>
		/// Compare Greater Than Word
		/// </summary>
		public void WriteCgt(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.cgt, rt, ra, rb);
		}

		/// <summary>
		/// Compare Greater Than Word Immediate
		/// </summary>
		public void WriteCgti(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.cgti, rt, ra, value);
		}

		/// <summary>
		/// Compare Logical Greater Than Byte
		/// </summary>
		public void WriteClgtb(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.clgtb, rt, ra, rb);
		}

		/// <summary>
		/// Compare Logical Greater Than Byte Immediate
		/// </summary>
		public void WriteClgtbi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.clgtbi, rt, ra, value);
		}

		/// <summary>
		/// Compare Logical Greater Than Halfword
		/// </summary>
		public void WriteClgth(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.clgth, rt, ra, rb);
		}

		/// <summary>
		/// Compare Logical Greater Than Halfword Immediate
		/// </summary>
		public void WriteClgthi(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.clgthi, rt, ra, value);
		}

		/// <summary>
		/// Compare Logical Greater Than Word
		/// </summary>
		public void WriteClgt(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.clgt, rt, ra, rb);
		}

		/// <summary>
		/// Compare Logical Greater Than Word Immediate
		/// </summary>
		public void WriteClgti(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI10(SpuOpCode.clgti, rt, ra, value);
		}

		/// <summary>
		/// Branch Relative
		/// </summary>
		public void WriteBr(int symbol)
		{
			WriteRI16x(SpuOpCode.br, symbol);
		}

		/// <summary>
		/// Branch Absolute
		/// </summary>
		public void WriteBra(int symbol)
		{
			WriteRI16x(SpuOpCode.bra, symbol);
		}

		/// <summary>
		/// Branch Relative and Set Link
		/// </summary>
		public void WriteBrsl(VirtualRegister rt, int symbol)
		{
			WriteRI16(SpuOpCode.brsl, rt, symbol);
		}

		/// <summary>
		/// Branch Absolute and Set Link
		/// </summary>
		public void WriteBrasl(VirtualRegister rt, int symbol)
		{
			WriteRI16(SpuOpCode.brasl, rt, symbol);
		}

		/// <summary>
		/// Branch Indirect
		/// </summary>
		public void WriteBi(VirtualRegister ra)
		{
			WriteRR1DE(SpuOpCode.bi, ra);
		}

		/// <summary>
		/// Interrupt Return
		/// </summary>
		public void WriteIret(VirtualRegister ra)
		{
			WriteRR1DE(SpuOpCode.iret, ra);
		}

		/// <summary>
		/// Branch Indirect and Set Link if External Data
		/// </summary>
		public void WriteBisled(VirtualRegister rt, VirtualRegister ra)
		{
			WriteRR2DE(SpuOpCode.bisled, rt, ra);
		}

		/// <summary>
		/// Branch Indirect and Set Link
		/// </summary>
		public void WriteBisl(VirtualRegister rt, VirtualRegister ra)
		{
			WriteRR2DE(SpuOpCode.bisl, rt, ra);
		}

		/// <summary>
		/// Branch If Not Zero Word
		/// </summary>
		public void WriteBrnz(VirtualRegister rt, int symbol)
		{
			WriteRI16(SpuOpCode.brnz, rt, symbol);
		}

		/// <summary>
		/// Branch If Zero Word
		/// </summary>
		public void WriteBrz(VirtualRegister rt, int symbol)
		{
			WriteRI16(SpuOpCode.brz, rt, symbol);
		}

		/// <summary>
		/// Branch If Not Zero Halfword
		/// </summary>
		public void WriteBrhnz(VirtualRegister rt, int symbol)
		{
			WriteRI16(SpuOpCode.brhnz, rt, symbol);
		}

		/// <summary>
		/// Branch If Zero Halfword
		/// </summary>
		public void WriteBrhz(VirtualRegister rt, int symbol)
		{
			WriteRI16(SpuOpCode.brhz, rt, symbol);
		}

		/// <summary>
		/// Branch Indirect If Zero
		/// </summary>
		public void WriteBiz(VirtualRegister rt, VirtualRegister ra)
		{
			WriteRR2DE(SpuOpCode.biz, rt, ra);
		}

		/// <summary>
		/// Branch Indirect If Not Zero
		/// </summary>
		public void WriteBinz(VirtualRegister rt, VirtualRegister ra)
		{
			WriteRR2DE(SpuOpCode.binz, rt, ra);
		}

		/// <summary>
		/// Branch Indirect If Zero Halfword
		/// </summary>
		public void WriteBihz(VirtualRegister rt, VirtualRegister ra)
		{
			WriteRR2DE(SpuOpCode.bihz, rt, ra);
		}

		/// <summary>
		/// Branch Indirect If Not Zero Halfword
		/// </summary>
		public void WriteBihnz(VirtualRegister rt, VirtualRegister ra)
		{
			WriteRR2DE(SpuOpCode.bihnz, rt, ra);
		}

		/// <summary>
		/// Floating Add
		/// </summary>
		public void WriteFa(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.fa, rt, ra, rb);
		}

		/// <summary>
		/// Double Floating Add
		/// </summary>
		public void WriteDfa(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.dfa, rt, ra, rb);
		}

		/// <summary>
		/// Floating Subtract
		/// </summary>
		public void WriteFs(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.fs, rt, ra, rb);
		}

		/// <summary>
		/// Double Floating Subtract
		/// </summary>
		public void WriteDfs(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.dfs, rt, ra, rb);
		}

		/// <summary>
		/// Floating Multiply
		/// </summary>
		public void WriteFm(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.fm, rt, ra, rb);
		}

		/// <summary>
		/// Double Floating Multiply
		/// </summary>
		public void WriteDfm(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.dfm, rt, ra, rb);
		}

		/// <summary>
		/// Floating Multiply and Add
		/// </summary>
		public void WriteFma(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb, VirtualRegister rc)
		{
			WriteRRR(SpuOpCode.fma, rt, ra, rb, rc);
		}

		/// <summary>
		/// Double Floating Multiply and Add
		/// </summary>
		public void WriteDfma(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.dfma, rt, ra, rb);
		}

		/// <summary>
		/// Floating Negative Multiply and Subtract
		/// </summary>
		public void WriteFnms(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb, VirtualRegister rc)
		{
			WriteRRR(SpuOpCode.fnms, rt, ra, rb, rc);
		}

		/// <summary>
		/// Double Floating Negative Multiply and Subtract
		/// </summary>
		public void WriteDfnms(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.dfnms, rt, ra, rb);
		}

		/// <summary>
		/// Floating Multiply and Subtract
		/// </summary>
		public void WriteFms(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb, VirtualRegister rc)
		{
			WriteRRR(SpuOpCode.fms, rt, ra, rb, rc);
		}

		/// <summary>
		/// Double Floating Multiply and Subtract
		/// </summary>
		public void WriteDfms(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.dfms, rt, ra, rb);
		}

		/// <summary>
		/// Double Floating Negative Multiply and Add
		/// </summary>
		public void WriteDfnma(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.dfnma, rt, ra, rb);
		}

		/// <summary>
		/// Floating Reciprocal Estimate
		/// </summary>
		public void WriteFrest(VirtualRegister rt, VirtualRegister ra)
		{
			WriteRR2(SpuOpCode.frest, rt, ra);
		}

		/// <summary>
		/// Floating Reciprocal Absolute Square Root Estimate
		/// </summary>
		public void WriteFrsqest(VirtualRegister rt, VirtualRegister ra)
		{
			WriteRR2(SpuOpCode.frsqest, rt, ra);
		}

		/// <summary>
		/// Floating Interpolate
		/// </summary>
		public void WriteFi(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.fi, rt, ra, rb);
		}

		/// <summary>
		/// Convert Signed Integer to Floating
		/// </summary>
		public void WriteCsflt(VirtualRegister rt, VirtualRegister ra, int scale)
		{
			WriteRI8(SpuOpCode.csflt, rt, ra, scale);
		}

		/// <summary>
		/// Convert Floating to Signed Integer
		/// </summary>
		public void WriteCflts(VirtualRegister rt, VirtualRegister ra, int scale)
		{
			WriteRI8(SpuOpCode.cflts, rt, ra, scale);
		}

		/// <summary>
		/// Convert Unsigned Integer to Floating
		/// </summary>
		public void WriteCuflt(VirtualRegister rt, VirtualRegister ra, int scale)
		{
			WriteRI8(SpuOpCode.cuflt, rt, ra, scale);
		}

		/// <summary>
		/// Convert Floating to Unsigned Integer
		/// </summary>
		public void WriteCfltu(VirtualRegister rt, VirtualRegister ra, int scale)
		{
			WriteRI8(SpuOpCode.cfltu, rt, ra, scale);
		}

		/// <summary>
		/// Floating Round Double to Single
		/// </summary>
		public void WriteFrds(VirtualRegister rt, VirtualRegister ra)
		{
			WriteRR2(SpuOpCode.frds, rt, ra);
		}

		/// <summary>
		/// Floating Extend Single to Double
		/// </summary>
		public void WriteFesd(VirtualRegister rt, VirtualRegister ra)
		{
			WriteRR2(SpuOpCode.fesd, rt, ra);
		}

		/// <summary>
		/// Double Floating Compare Equal
		/// </summary>
		public void WriteDfceq(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.dfceq, rt, ra, rb);
		}

		/// <summary>
		/// Double Floating Compare Magnitude Equal
		/// </summary>
		public void WriteDfcmeq(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.dfcmeq, rt, ra, rb);
		}

		/// <summary>
		/// Double Floating Compare Greater Than
		/// </summary>
		public void WriteDfcgt(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.dfcgt, rt, ra, rb);
		}

		/// <summary>
		/// Double Floating Compare Magnitude Greater Than
		/// </summary>
		public void WriteDfcmgt(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.dfcmgt, rt, ra, rb);
		}

		/// <summary>
		/// Double Floating Test Special Value
		/// </summary>
		public void WriteDftsv(VirtualRegister rt, VirtualRegister ra, int value)
		{
			WriteRI7(SpuOpCode.dftsv, rt, ra, value);
		}

		/// <summary>
		/// Floating Compare Equal
		/// </summary>
		public void WriteFceq(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.fceq, rt, ra, rb);
		}

		/// <summary>
		/// Floating Compare Magnitude Equal
		/// </summary>
		public void WriteFcmeq(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.fcmeq, rt, ra, rb);
		}

		/// <summary>
		/// Floating Compare Greater Than
		/// </summary>
		public void WriteFcgt(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.fcgt, rt, ra, rb);
		}

		/// <summary>
		/// Floating Compare Magnitude Greater Than
		/// </summary>
		public void WriteFcmgt(VirtualRegister rt, VirtualRegister ra, VirtualRegister rb)
		{
			WriteRR(SpuOpCode.fcmgt, rt, ra, rb);
		}

		/// <summary>
		/// Floating-Point Status and Control Register Write
		/// </summary>
		public void WriteFscrwr(VirtualRegister rt, VirtualRegister ra)
		{
			WriteRR2(SpuOpCode.fscrwr, rt, ra);
		}

		/// <summary>
		/// Floating-Point Status and Control Register Read
		/// </summary>
		public void WriteFscrrd(VirtualRegister rt)
		{
			WriteRR1(SpuOpCode.fscrrd, rt);
		}
	}
}
