using System;
using System.Collections.Generic;
using System.Text;

namespace CellDotNet
{

	// THIS CLASS IS GENERATED BY CellDotNet.CodeGenUtils.GenerateSpuInstructionWriterMethods() - DO NO EDIT. 
	partial class SpuInstructionWriter
	{

		/// <summary>
		/// Load Quadword (d-form)
		/// </summary>
		public VirtualRegister WriteLqd(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.lqd, ra, value);
		}

		/// <summary>
		/// Load Quadword (x-form)
		/// </summary>
		public VirtualRegister WriteLqx(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.lqx, ra, rb);
		}

		/// <summary>
		/// Load Quadword (a-form)
		/// </summary>
		public VirtualRegister WriteLqa(int symbol)
		{
			return WriteRI16(SpuOpCode.lqa, symbol);
		}

		/// <summary>
		/// Load Quadword Instruction Relative (a-form)
		/// </summary>
		public VirtualRegister WriteLqr(int symbol)
		{
			return WriteRI16(SpuOpCode.lqr, symbol);
		}

		/// <summary>
		/// Store Quadword (d-form)
		/// </summary>
		public void WriteStqd(VirtualRegister ra, VirtualRegister rt, int value)
		{
			WriteRI10Sourced(SpuOpCode.stqd, ra, rt, value);
		}

		/// <summary>
		/// Store Quadword (x-form)
		/// </summary>
		public void WriteStqx(VirtualRegister ra, VirtualRegister rb, VirtualRegister rt)
		{
			WriteRR(SpuOpCode.stqx, ra, rb, rt);
		}

		/// <summary>
		/// Store Quadword (a-form)
		/// </summary>
		public void WriteStqa(VirtualRegister rt, int symbol)
		{
			WriteRI16Sourced(SpuOpCode.stqa, rt, symbol);
		}

		/// <summary>
		/// Store Quadword Instruction Relative (a-form)
		/// </summary>
		public void WriteStqr(VirtualRegister rt, int symbol)
		{
			WriteRI16Sourced(SpuOpCode.stqr, rt, symbol);
		}

		/// <summary>
		/// Generate Controls for Byte Insertion (d-form)
		/// </summary>
		public VirtualRegister WriteCbd(VirtualRegister ra, int value)
		{
			return WriteRI7(SpuOpCode.cbd, ra, value);
		}

		/// <summary>
		/// Generate Controls for Byte Insertion (x-form)
		/// </summary>
		public VirtualRegister WriteCbx(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.cbx, ra, rb);
		}

		/// <summary>
		/// Generate Controls for Halfword Insertion (d-form)
		/// </summary>
		public VirtualRegister WriteChd(VirtualRegister ra, int value)
		{
			return WriteRI7(SpuOpCode.chd, ra, value);
		}

		/// <summary>
		/// Generate Controls for Halfword Insertion (x-form)
		/// </summary>
		public VirtualRegister WriteChx(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.chx, ra, rb);
		}

		/// <summary>
		/// Generate Controls for Word Insertion (d-form)
		/// </summary>
		public VirtualRegister WriteCwd(VirtualRegister ra, int value)
		{
			return WriteRI7(SpuOpCode.cwd, ra, value);
		}

		/// <summary>
		/// Generate Controls for Word Insertion (x-form)
		/// </summary>
		public VirtualRegister WriteCwx(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.cwx, ra, rb);
		}

		/// <summary>
		/// Generate Controls for Doubleword Insertion (d-form)
		/// </summary>
		public VirtualRegister WriteCdd(VirtualRegister ra, int value)
		{
			return WriteRI7(SpuOpCode.cdd, ra, value);
		}

		/// <summary>
		/// Generate Controls for Doubleword Insertion (x-form)
		/// </summary>
		public VirtualRegister WriteCdx(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.cdx, ra, rb);
		}

		/// <summary>
		/// Immediate Load Halfword
		/// </summary>
		public VirtualRegister WriteIlh(int symbol)
		{
			return WriteRI16(SpuOpCode.ilh, symbol);
		}

		/// <summary>
		/// Immediate Load Halfword Upper
		/// </summary>
		public VirtualRegister WriteIlhu(int symbol)
		{
			return WriteRI16(SpuOpCode.ilhu, symbol);
		}

		/// <summary>
		/// Immediate Load Word
		/// </summary>
		public VirtualRegister WriteIl(int symbol)
		{
			return WriteRI16(SpuOpCode.il, symbol);
		}

		/// <summary>
		/// Immediate Load Address
		/// </summary>
		public VirtualRegister WriteIla(int symbol)
		{
			return WriteRI18(SpuOpCode.ila, symbol);
		}

		/// <summary>
		/// Immediate Or Halfword Lower
		/// </summary>
		public VirtualRegister WriteIohl(int symbol)
		{
			return WriteRI16(SpuOpCode.iohl, symbol);
		}

		/// <summary>
		/// Form Select Mask for Bytes Immediate
		/// </summary>
		public VirtualRegister WriteFsmbi(int symbol)
		{
			return WriteRI16(SpuOpCode.fsmbi, symbol);
		}

		/// <summary>
		/// Add Halfword
		/// </summary>
		public VirtualRegister WriteAh(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.ah, ra, rb);
		}

		/// <summary>
		/// Add Halfword Immediate
		/// </summary>
		public VirtualRegister WriteAhi(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.ahi, ra, value);
		}

		/// <summary>
		/// Add Word
		/// </summary>
		public VirtualRegister WriteA(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.a, ra, rb);
		}

		/// <summary>
		/// Add Word Immediate
		/// </summary>
		public VirtualRegister WriteAi(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.ai, ra, value);
		}

		/// <summary>
		/// Subtract from Halfword
		/// </summary>
		public VirtualRegister WriteSfh(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.sfh, ra, rb);
		}

		/// <summary>
		/// Subtract from Halfword Immediate
		/// </summary>
		public VirtualRegister WriteSfhi(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.sfhi, ra, value);
		}

		/// <summary>
		/// Subtract from Word
		/// </summary>
		public VirtualRegister WriteSf(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.sf, ra, rb);
		}

		/// <summary>
		/// Subtract from Word Immediate
		/// </summary>
		public VirtualRegister WriteSfi(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.sfi, ra, value);
		}

		/// <summary>
		/// Add Extended
		/// </summary>
		public VirtualRegister WriteAddx(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.addx, ra, rb);
		}

		/// <summary>
		/// Carry Generate
		/// </summary>
		public VirtualRegister WriteCg(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.cg, ra, rb);
		}

		/// <summary>
		/// Carry Generate Extended
		/// </summary>
		public VirtualRegister WriteCgx(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.cgx, ra, rb);
		}

		/// <summary>
		/// Subtract from Extended
		/// </summary>
		public VirtualRegister WriteSfx(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.sfx, ra, rb);
		}

		/// <summary>
		/// Borrow Generate
		/// </summary>
		public VirtualRegister WriteBg(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.bg, ra, rb);
		}

		/// <summary>
		/// Borrow Generate Extended
		/// </summary>
		public VirtualRegister WriteBgx(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.bgx, ra, rb);
		}

		/// <summary>
		/// Multiply
		/// </summary>
		public VirtualRegister WriteMpy(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.mpy, ra, rb);
		}

		/// <summary>
		/// Multiply Unsigned
		/// </summary>
		public VirtualRegister WriteMpyu(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.mpyu, ra, rb);
		}

		/// <summary>
		/// Multiply Immediate
		/// </summary>
		public VirtualRegister WriteMpyi(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.mpyi, ra, value);
		}

		/// <summary>
		/// Multiply Unsigned Immediate
		/// </summary>
		public VirtualRegister WriteMpyui(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.mpyui, ra, value);
		}

		/// <summary>
		/// Multiply and Add
		/// </summary>
		public VirtualRegister WriteMpya(VirtualRegister ra, VirtualRegister rb, VirtualRegister rc)
		{
			return WriteRRR(SpuOpCode.mpya, ra, rb, rc);
		}

		/// <summary>
		/// Multiply High
		/// </summary>
		public VirtualRegister WriteMpyh(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.mpyh, ra, rb);
		}

		/// <summary>
		/// Multiply and Shift Right
		/// </summary>
		public VirtualRegister WriteMpys(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.mpys, ra, rb);
		}

		/// <summary>
		/// Multiply High High
		/// </summary>
		public VirtualRegister WriteMpyhh(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.mpyhh, ra, rb);
		}

		/// <summary>
		/// Multiply High High and Add
		/// </summary>
		public VirtualRegister WriteMpyhha(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.mpyhha, ra, rb);
		}

		/// <summary>
		/// Multiply High High Unsigned
		/// </summary>
		public VirtualRegister WriteMpyhhu(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.mpyhhu, ra, rb);
		}

		/// <summary>
		/// Multiply High High Unsigned and Add
		/// </summary>
		public VirtualRegister WriteMpyhhau(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.mpyhhau, ra, rb);
		}

		/// <summary>
		/// Count Leading Zeros
		/// </summary>
		public VirtualRegister WriteClz(VirtualRegister ra)
		{
			return WriteRR2(SpuOpCode.clz, ra);
		}

		/// <summary>
		/// Count Ones in Bytes
		/// </summary>
		public VirtualRegister WriteCntb(VirtualRegister ra)
		{
			return WriteRR2(SpuOpCode.cntb, ra);
		}

		/// <summary>
		/// Form Select Mask for Bytes
		/// </summary>
		public VirtualRegister WriteFsmb(VirtualRegister ra)
		{
			return WriteRR2(SpuOpCode.fsmb, ra);
		}

		/// <summary>
		/// Form Select Mask for Halfwords
		/// </summary>
		public VirtualRegister WriteFsmh(VirtualRegister ra)
		{
			return WriteRR2(SpuOpCode.fsmh, ra);
		}

		/// <summary>
		/// Form Select Mask for Words
		/// </summary>
		public VirtualRegister WriteFsm(VirtualRegister ra)
		{
			return WriteRR2(SpuOpCode.fsm, ra);
		}

		/// <summary>
		/// Gather Bits from Bytes
		/// </summary>
		public VirtualRegister WriteGbb(VirtualRegister ra)
		{
			return WriteRR2(SpuOpCode.gbb, ra);
		}

		/// <summary>
		/// Gather Bits from Halfwords
		/// </summary>
		public VirtualRegister WriteGbh(VirtualRegister ra)
		{
			return WriteRR2(SpuOpCode.gbh, ra);
		}

		/// <summary>
		/// Gather Bits from Words
		/// </summary>
		public VirtualRegister WriteGb(VirtualRegister ra)
		{
			return WriteRR2(SpuOpCode.gb, ra);
		}

		/// <summary>
		/// Average Bytes
		/// </summary>
		public VirtualRegister WriteAvgb(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.avgb, ra, rb);
		}

		/// <summary>
		/// Absolute Differences of Bytes
		/// </summary>
		public VirtualRegister WriteAbsdb(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.absdb, ra, rb);
		}

		/// <summary>
		/// Sum Bytes into Halfwords
		/// </summary>
		public VirtualRegister WriteSumb(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.sumb, ra, rb);
		}

		/// <summary>
		/// Extend Sign Byte to Halfword
		/// </summary>
		public VirtualRegister WriteXsbh(VirtualRegister ra)
		{
			return WriteRR2(SpuOpCode.xsbh, ra);
		}

		/// <summary>
		/// Extend Sign Halfword to Word
		/// </summary>
		public VirtualRegister WriteXshw(VirtualRegister ra)
		{
			return WriteRR2(SpuOpCode.xshw, ra);
		}

		/// <summary>
		/// Extend Sign Word to Doubleword
		/// </summary>
		public VirtualRegister WriteXswd(VirtualRegister ra)
		{
			return WriteRR2(SpuOpCode.xswd, ra);
		}

		/// <summary>
		/// And
		/// </summary>
		public VirtualRegister WriteAnd(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.and, ra, rb);
		}

		/// <summary>
		/// And with Complement
		/// </summary>
		public VirtualRegister WriteAndc(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.andc, ra, rb);
		}

		/// <summary>
		/// And Byte Immediate
		/// </summary>
		public VirtualRegister WriteAndbi(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.andbi, ra, value);
		}

		/// <summary>
		/// And Halfword Immediate
		/// </summary>
		public VirtualRegister WriteAndhi(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.andhi, ra, value);
		}

		/// <summary>
		/// And Word Immediate
		/// </summary>
		public VirtualRegister WriteAndi(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.andi, ra, value);
		}

		/// <summary>
		/// Or
		/// </summary>
		public VirtualRegister WriteOr(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.or, ra, rb);
		}

		/// <summary>
		/// Or with Complement
		/// </summary>
		public VirtualRegister WriteOrc(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.orc, ra, rb);
		}

		/// <summary>
		/// Or Byte Immediate
		/// </summary>
		public VirtualRegister WriteOrbi(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.orbi, ra, value);
		}

		/// <summary>
		/// Or Halfword Immediate
		/// </summary>
		public VirtualRegister WriteOrhi(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.orhi, ra, value);
		}

		/// <summary>
		/// Or Word Immediate
		/// </summary>
		public VirtualRegister WriteOri(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.ori, ra, value);
		}

		/// <summary>
		/// Or Across
		/// </summary>
		public VirtualRegister WriteOrx(VirtualRegister ra)
		{
			return WriteRR2(SpuOpCode.orx, ra);
		}

		/// <summary>
		/// Exclusive Or
		/// </summary>
		public VirtualRegister WriteXor(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.xor, ra, rb);
		}

		/// <summary>
		/// Exclusive Or Byte Immediate
		/// </summary>
		public VirtualRegister WriteXorbi(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.xorbi, ra, value);
		}

		/// <summary>
		/// Exclusive Or Halfword Immediate
		/// </summary>
		public VirtualRegister WriteXorhi(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.xorhi, ra, value);
		}

		/// <summary>
		/// Exclusive Or Word Immediate
		/// </summary>
		public VirtualRegister WriteXori(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.xori, ra, value);
		}

		/// <summary>
		/// Nand
		/// </summary>
		public VirtualRegister WriteNand(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.nand, ra, rb);
		}

		/// <summary>
		/// Nor
		/// </summary>
		public VirtualRegister WriteNor(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.nor, ra, rb);
		}

		/// <summary>
		/// Equivalent
		/// </summary>
		public VirtualRegister WriteEqv(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.eqv, ra, rb);
		}

		/// <summary>
		/// Select Bits
		/// </summary>
		public VirtualRegister WriteSelb(VirtualRegister ra, VirtualRegister rb, VirtualRegister rc)
		{
			return WriteRRR(SpuOpCode.selb, ra, rb, rc);
		}

		/// <summary>
		/// Shuffle Bytes
		/// </summary>
		public VirtualRegister WriteShufb(VirtualRegister ra, VirtualRegister rb, VirtualRegister rc)
		{
			return WriteRRR(SpuOpCode.shufb, ra, rb, rc);
		}

		/// <summary>
		/// Shift Left Halfword
		/// </summary>
		public VirtualRegister WriteShlh(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.shlh, ra, rb);
		}

		/// <summary>
		/// Shift Left Halfword Immediate
		/// </summary>
		public VirtualRegister WriteShlhi(VirtualRegister ra, int value)
		{
			return WriteRI7(SpuOpCode.shlhi, ra, value);
		}

		/// <summary>
		/// Shift Left Word
		/// </summary>
		public VirtualRegister WriteShl(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.shl, ra, rb);
		}

		/// <summary>
		/// Shift Left Word Immediate
		/// </summary>
		public VirtualRegister WriteShli(VirtualRegister ra, int value)
		{
			return WriteRI7(SpuOpCode.shli, ra, value);
		}

		/// <summary>
		/// Shift Left Quadword by Bits
		/// </summary>
		public VirtualRegister WriteShlqbi(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.shlqbi, ra, rb);
		}

		/// <summary>
		/// Shift Left Quadword by Bits Immediate
		/// </summary>
		public VirtualRegister WriteShlqbii(VirtualRegister ra, int value)
		{
			return WriteRI7(SpuOpCode.shlqbii, ra, value);
		}

		/// <summary>
		/// Shift Left Quadword by Bytes
		/// </summary>
		public VirtualRegister WriteShlqby(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.shlqby, ra, rb);
		}

		/// <summary>
		/// Shift Left Quadword by Bytes Immediate
		/// </summary>
		public VirtualRegister WriteSqlqbyi(VirtualRegister ra, int value)
		{
			return WriteRI7(SpuOpCode.sqlqbyi, ra, value);
		}

		/// <summary>
		/// Shift Left Quadword by Bytes from Bit Shift Count
		/// </summary>
		public VirtualRegister WriteShlqbybi(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.shlqbybi, ra, rb);
		}

		/// <summary>
		/// Rotate Halfword
		/// </summary>
		public VirtualRegister WriteRoth(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.roth, ra, rb);
		}

		/// <summary>
		/// Rotate Halfword Immediate
		/// </summary>
		public VirtualRegister WriteRothi(VirtualRegister ra, int value)
		{
			return WriteRI7(SpuOpCode.rothi, ra, value);
		}

		/// <summary>
		/// Rotate Word
		/// </summary>
		public VirtualRegister WriteRot(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.rot, ra, rb);
		}

		/// <summary>
		/// Rotate Word Immediate
		/// </summary>
		public VirtualRegister WriteRoti(VirtualRegister ra, int value)
		{
			return WriteRI7(SpuOpCode.roti, ra, value);
		}

		/// <summary>
		/// Rotate Quadword by Bytes
		/// </summary>
		public VirtualRegister WriteRotqby(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.rotqby, ra, rb);
		}

		/// <summary>
		/// Rotate Quadword by Bytes Immediate
		/// </summary>
		public VirtualRegister WriteRotqbyi(VirtualRegister ra, int value)
		{
			return WriteRI7(SpuOpCode.rotqbyi, ra, value);
		}

		/// <summary>
		/// Rotate Quadword by Bytes from Bit Shift Count
		/// </summary>
		public VirtualRegister WriteRotqbybi(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.rotqbybi, ra, rb);
		}

		/// <summary>
		/// Rotate Quadword by Bits
		/// </summary>
		public VirtualRegister WriteRotqbi(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.rotqbi, ra, rb);
		}

		/// <summary>
		/// Rotate Quadword by Bits Immediate
		/// </summary>
		public VirtualRegister WriteRotqbii(VirtualRegister ra, int value)
		{
			return WriteRI7(SpuOpCode.rotqbii, ra, value);
		}

		/// <summary>
		/// Rotate and Mask Halfword
		/// </summary>
		public VirtualRegister WriteRothm(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.rothm, ra, rb);
		}

		/// <summary>
		/// Rotate and Mask Halfword Immediate
		/// </summary>
		public VirtualRegister WriteRothmi(VirtualRegister ra, int value)
		{
			return WriteRI7(SpuOpCode.rothmi, ra, value);
		}

		/// <summary>
		/// Rotate and Mask Word
		/// </summary>
		public VirtualRegister WriteRotm(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.rotm, ra, rb);
		}

		/// <summary>
		/// Rotate and Mask Word Immediate
		/// </summary>
		public VirtualRegister WriteRotmi(VirtualRegister ra, int value)
		{
			return WriteRI7(SpuOpCode.rotmi, ra, value);
		}

		/// <summary>
		/// Rotate and Mask Quadword by Bytes
		/// </summary>
		public VirtualRegister WriteRotqmby(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.rotqmby, ra, rb);
		}

		/// <summary>
		/// Rotate and Mask Quadword by Bytes Immediate
		/// </summary>
		public VirtualRegister WriteRotqmbyi(VirtualRegister ra, int value)
		{
			return WriteRI7(SpuOpCode.rotqmbyi, ra, value);
		}

		/// <summary>
		/// Rotate and Mask Quadword Bytes from Bit Shift Count
		/// </summary>
		public VirtualRegister WriteRotqmbybi(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.rotqmbybi, ra, rb);
		}

		/// <summary>
		/// Rotate and Mask Quadword by Bits
		/// </summary>
		public VirtualRegister WriteRotqmbi(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.rotqmbi, ra, rb);
		}

		/// <summary>
		/// Rotate and Mask Quadword by Bits Immediate
		/// </summary>
		public VirtualRegister WriteRotqmbii(VirtualRegister ra, int value)
		{
			return WriteRI7(SpuOpCode.rotqmbii, ra, value);
		}

		/// <summary>
		/// Rotate and Mask Algebraic Halfword
		/// </summary>
		public VirtualRegister WriteRotmah(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.rotmah, ra, rb);
		}

		/// <summary>
		/// Rotate and Mask Algebraic Halfword Immediate
		/// </summary>
		public VirtualRegister WriteRotmahi(VirtualRegister ra, int value)
		{
			return WriteRI7(SpuOpCode.rotmahi, ra, value);
		}

		/// <summary>
		/// Rotate and Mask Algebraic Word
		/// </summary>
		public VirtualRegister WriteRotma(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.rotma, ra, rb);
		}

		/// <summary>
		/// Rotate and Mask Algebraic Word Immediate
		/// </summary>
		public VirtualRegister WriteRotmai(VirtualRegister ra, int value)
		{
			return WriteRI7(SpuOpCode.rotmai, ra, value);
		}

		/// <summary>
		/// Halt If Equal
		/// </summary>
		public VirtualRegister WriteHeq(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.heq, ra, rb);
		}

		/// <summary>
		/// Halt If Equal Immediate
		/// </summary>
		public VirtualRegister WriteHeqi(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.heqi, ra, value);
		}

		/// <summary>
		/// Halt If Greater Than
		/// </summary>
		public VirtualRegister WriteHgt(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.hgt, ra, rb);
		}

		/// <summary>
		/// Halt If Greater Than Immediate
		/// </summary>
		public VirtualRegister WriteHgti(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.hgti, ra, value);
		}

		/// <summary>
		/// Halt If Logically Greater Than
		/// </summary>
		public VirtualRegister WriteHlgt(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.hlgt, ra, rb);
		}

		/// <summary>
		/// Halt If Logically Greater Than Immediate
		/// </summary>
		public VirtualRegister WriteHlgti(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.hlgti, ra, value);
		}

		/// <summary>
		/// Compare Equal Byte
		/// </summary>
		public VirtualRegister WriteCeqb(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.ceqb, ra, rb);
		}

		/// <summary>
		/// Compare Equal Byte Immediate
		/// </summary>
		public VirtualRegister WriteCeqbi(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.ceqbi, ra, value);
		}

		/// <summary>
		/// Compare Equal Halfword
		/// </summary>
		public VirtualRegister WriteCeqh(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.ceqh, ra, rb);
		}

		/// <summary>
		/// Compare Equal Halfword Immediate
		/// </summary>
		public VirtualRegister WriteCeqhi(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.ceqhi, ra, value);
		}

		/// <summary>
		/// Compare Equal Word
		/// </summary>
		public VirtualRegister WriteCeq(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.ceq, ra, rb);
		}

		/// <summary>
		/// Compare Equal Word Immediate
		/// </summary>
		public VirtualRegister WriteCeqi(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.ceqi, ra, value);
		}

		/// <summary>
		/// Compare Greater Than Byte
		/// </summary>
		public VirtualRegister WriteCgtb(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.cgtb, ra, rb);
		}

		/// <summary>
		/// Compare Greater Than Byte Immediate
		/// </summary>
		public VirtualRegister WriteCgtbi(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.cgtbi, ra, value);
		}

		/// <summary>
		/// Compare Greater Than Halfword
		/// </summary>
		public VirtualRegister WriteCgth(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.cgth, ra, rb);
		}

		/// <summary>
		/// Compare Greater Than Halfword Immediate
		/// </summary>
		public VirtualRegister WriteCgthi(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.cgthi, ra, value);
		}

		/// <summary>
		/// Compare Greater Than Word
		/// </summary>
		public VirtualRegister WriteCgt(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.cgt, ra, rb);
		}

		/// <summary>
		/// Compare Greater Than Word Immediate
		/// </summary>
		public VirtualRegister WriteCgti(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.cgti, ra, value);
		}

		/// <summary>
		/// Compare Logical Greater Than Byte
		/// </summary>
		public VirtualRegister WriteClgtb(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.clgtb, ra, rb);
		}

		/// <summary>
		/// Compare Logical Greater Than Byte Immediate
		/// </summary>
		public VirtualRegister WriteClgtbi(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.clgtbi, ra, value);
		}

		/// <summary>
		/// Compare Logical Greater Than Halfword
		/// </summary>
		public VirtualRegister WriteClgth(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.clgth, ra, rb);
		}

		/// <summary>
		/// Compare Logical Greater Than Halfword Immediate
		/// </summary>
		public VirtualRegister WriteClgthi(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.clgthi, ra, value);
		}

		/// <summary>
		/// Compare Logical Greater Than Word
		/// </summary>
		public VirtualRegister WriteClgt(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.clgt, ra, rb);
		}

		/// <summary>
		/// Compare Logical Greater Than Word Immediate
		/// </summary>
		public VirtualRegister WriteClgti(VirtualRegister ra, int value)
		{
			return WriteRI10(SpuOpCode.clgti, ra, value);
		}

		/// <summary>
		/// Branch Relative
		/// </summary>
		public void WriteBr(int symbol)
		{
			WriteRI16x(SpuOpCode.br, symbol);
		}

		/// <summary>
		/// Branch Absolute
		/// </summary>
		public void WriteBra(int symbol)
		{
			WriteRI16x(SpuOpCode.bra, symbol);
		}

		/// <summary>
		/// Branch Relative and Set Link
		/// </summary>
		public VirtualRegister WriteBrsl(int symbol)
		{
			return WriteRI16(SpuOpCode.brsl, symbol);
		}

		/// <summary>
		/// Branch Absolute and Set Link
		/// </summary>
		public VirtualRegister WriteBrasl(int symbol)
		{
			return WriteRI16(SpuOpCode.brasl, symbol);
		}

		/// <summary>
		/// Branch Indirect
		/// </summary>
		public void WriteBi(VirtualRegister ra)
		{
			WriteRR1DE(SpuOpCode.bi, ra);
		}

		/// <summary>
		/// Interrupt Return
		/// </summary>
		public void WriteIret(VirtualRegister ra)
		{
			WriteRR1DE(SpuOpCode.iret, ra);
		}

		/// <summary>
		/// Branch Indirect and Set Link if External Data
		/// </summary>
		public VirtualRegister WriteBisled(VirtualRegister ra)
		{
			return WriteRR2DE(SpuOpCode.bisled, ra);
		}

		/// <summary>
		/// Branch Indirect and Set Link
		/// </summary>
		public VirtualRegister WriteBisl(VirtualRegister ra)
		{
			return WriteRR2DE(SpuOpCode.bisl, ra);
		}

		/// <summary>
		/// Branch If Not Zero Word
		/// </summary>
		public VirtualRegister WriteBrnz(int symbol)
		{
			return WriteRI16(SpuOpCode.brnz, symbol);
		}

		/// <summary>
		/// Branch If Zero Word
		/// </summary>
		public VirtualRegister WriteBrz(int symbol)
		{
			return WriteRI16(SpuOpCode.brz, symbol);
		}

		/// <summary>
		/// Branch If Not Zero Halfword
		/// </summary>
		public VirtualRegister WriteBrhnz(int symbol)
		{
			return WriteRI16(SpuOpCode.brhnz, symbol);
		}

		/// <summary>
		/// Branch If Zero Halfword
		/// </summary>
		public VirtualRegister WriteBrhz(int symbol)
		{
			return WriteRI16(SpuOpCode.brhz, symbol);
		}

		/// <summary>
		/// Branch Indirect If Zero
		/// </summary>
		public VirtualRegister WriteBiz(VirtualRegister ra)
		{
			return WriteRR2DE(SpuOpCode.biz, ra);
		}

		/// <summary>
		/// Branch Indirect If Not Zero
		/// </summary>
		public VirtualRegister WriteBinz(VirtualRegister ra)
		{
			return WriteRR2DE(SpuOpCode.binz, ra);
		}

		/// <summary>
		/// Branch Indirect If Zero Halfword
		/// </summary>
		public VirtualRegister WriteBihz(VirtualRegister ra)
		{
			return WriteRR2DE(SpuOpCode.bihz, ra);
		}

		/// <summary>
		/// Branch Indirect If Not Zero Halfword
		/// </summary>
		public VirtualRegister WriteBihnz(VirtualRegister ra)
		{
			return WriteRR2DE(SpuOpCode.bihnz, ra);
		}

		/// <summary>
		/// Floating Add
		/// </summary>
		public VirtualRegister WriteFa(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.fa, ra, rb);
		}

		/// <summary>
		/// Double Floating Add
		/// </summary>
		public VirtualRegister WriteDfa(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.dfa, ra, rb);
		}

		/// <summary>
		/// Floating Subtract
		/// </summary>
		public VirtualRegister WriteFs(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.fs, ra, rb);
		}

		/// <summary>
		/// Double Floating Subtract
		/// </summary>
		public VirtualRegister WriteDfs(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.dfs, ra, rb);
		}

		/// <summary>
		/// Floating Multiply
		/// </summary>
		public VirtualRegister WriteFm(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.fm, ra, rb);
		}

		/// <summary>
		/// Double Floating Multiply
		/// </summary>
		public VirtualRegister WriteDfm(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.dfm, ra, rb);
		}

		/// <summary>
		/// Floating Multiply and Add
		/// </summary>
		public VirtualRegister WriteFma(VirtualRegister ra, VirtualRegister rb, VirtualRegister rc)
		{
			return WriteRRR(SpuOpCode.fma, ra, rb, rc);
		}

		/// <summary>
		/// Double Floating Multiply and Add
		/// </summary>
		public VirtualRegister WriteDfma(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.dfma, ra, rb);
		}

		/// <summary>
		/// Floating Negative Multiply and Subtract
		/// </summary>
		public VirtualRegister WriteFnms(VirtualRegister ra, VirtualRegister rb, VirtualRegister rc)
		{
			return WriteRRR(SpuOpCode.fnms, ra, rb, rc);
		}

		/// <summary>
		/// Double Floating Negative Multiply and Subtract
		/// </summary>
		public VirtualRegister WriteDfnms(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.dfnms, ra, rb);
		}

		/// <summary>
		/// Floating Multiply and Subtract
		/// </summary>
		public VirtualRegister WriteFms(VirtualRegister ra, VirtualRegister rb, VirtualRegister rc)
		{
			return WriteRRR(SpuOpCode.fms, ra, rb, rc);
		}

		/// <summary>
		/// Double Floating Multiply and Subtract
		/// </summary>
		public VirtualRegister WriteDfms(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.dfms, ra, rb);
		}

		/// <summary>
		/// Double Floating Negative Multiply and Add
		/// </summary>
		public VirtualRegister WriteDfnma(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.dfnma, ra, rb);
		}

		/// <summary>
		/// Floating Reciprocal Estimate
		/// </summary>
		public VirtualRegister WriteFrest(VirtualRegister ra)
		{
			return WriteRR2(SpuOpCode.frest, ra);
		}

		/// <summary>
		/// Floating Reciprocal Absolute Square Root Estimate
		/// </summary>
		public VirtualRegister WriteFrsqest(VirtualRegister ra)
		{
			return WriteRR2(SpuOpCode.frsqest, ra);
		}

		/// <summary>
		/// Floating Interpolate
		/// </summary>
		public VirtualRegister WriteFi(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.fi, ra, rb);
		}

		/// <summary>
		/// Convert Signed Integer to Floating
		/// </summary>
		public VirtualRegister WriteCsflt(VirtualRegister ra, int scale)
		{
			return WriteRI8(SpuOpCode.csflt, ra, scale);
		}

		/// <summary>
		/// Convert Floating to Signed Integer
		/// </summary>
		public VirtualRegister WriteCflts(VirtualRegister ra, int scale)
		{
			return WriteRI8(SpuOpCode.cflts, ra, scale);
		}

		/// <summary>
		/// Convert Unsigned Integer to Floating
		/// </summary>
		public VirtualRegister WriteCuflt(VirtualRegister ra, int scale)
		{
			return WriteRI8(SpuOpCode.cuflt, ra, scale);
		}

		/// <summary>
		/// Convert Floating to Unsigned Integer
		/// </summary>
		public VirtualRegister WriteCfltu(VirtualRegister ra, int scale)
		{
			return WriteRI8(SpuOpCode.cfltu, ra, scale);
		}

		/// <summary>
		/// Floating Round Double to Single
		/// </summary>
		public VirtualRegister WriteFrds(VirtualRegister ra)
		{
			return WriteRR2(SpuOpCode.frds, ra);
		}

		/// <summary>
		/// Floating Extend Single to Double
		/// </summary>
		public VirtualRegister WriteFesd(VirtualRegister ra)
		{
			return WriteRR2(SpuOpCode.fesd, ra);
		}

		/// <summary>
		/// Double Floating Compare Equal
		/// </summary>
		public VirtualRegister WriteDfceq(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.dfceq, ra, rb);
		}

		/// <summary>
		/// Double Floating Compare Magnitude Equal
		/// </summary>
		public VirtualRegister WriteDfcmeq(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.dfcmeq, ra, rb);
		}

		/// <summary>
		/// Double Floating Compare Greater Than
		/// </summary>
		public VirtualRegister WriteDfcgt(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.dfcgt, ra, rb);
		}

		/// <summary>
		/// Double Floating Compare Magnitude Greater Than
		/// </summary>
		public VirtualRegister WriteDfcmgt(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.dfcmgt, ra, rb);
		}

		/// <summary>
		/// Double Floating Test Special Value
		/// </summary>
		public VirtualRegister WriteDftsv(VirtualRegister ra, int value)
		{
			return WriteRI7(SpuOpCode.dftsv, ra, value);
		}

		/// <summary>
		/// Floating Compare Equal
		/// </summary>
		public VirtualRegister WriteFceq(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.fceq, ra, rb);
		}

		/// <summary>
		/// Floating Compare Magnitude Equal
		/// </summary>
		public VirtualRegister WriteFcmeq(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.fcmeq, ra, rb);
		}

		/// <summary>
		/// Floating Compare Greater Than
		/// </summary>
		public VirtualRegister WriteFcgt(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.fcgt, ra, rb);
		}

		/// <summary>
		/// Floating Compare Magnitude Greater Than
		/// </summary>
		public VirtualRegister WriteFcmgt(VirtualRegister ra, VirtualRegister rb)
		{
			return WriteRR(SpuOpCode.fcmgt, ra, rb);
		}

		/// <summary>
		/// Floating-Point Status and Control Register Write
		/// </summary>
		public VirtualRegister WriteFscrwr(VirtualRegister ra)
		{
			return WriteRR2(SpuOpCode.fscrwr, ra);
		}

		/// <summary>
		/// Floating-Point Status and Control Register Read
		/// </summary>
		public VirtualRegister WriteFscrrd()
		{
			return WriteRR1(SpuOpCode.fscrrd);
		}

	}

}
